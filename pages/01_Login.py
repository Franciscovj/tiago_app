import streamlit as st
import sys
import os
import datetime # Necess√°rio para a expira√ß√£o do cookie
from streamlit_cookies_manager import EncryptedCookieManager # Alterado para EncryptedCookieManager

# Adicionar o diret√≥rio raiz ao sys.path para importar user_management
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

try:
    from user_management import verify_user, register_user, initialize_users_file
except ImportError:
    st.error("Falha ao importar user_management. Verifique a estrutura do projeto e o sys.path.")
    st.stop()

# Configura√ß√£o do gerenciador de cookies
# A chave DEVE ser uma string codificada em URL-safe base64 de 32 bytes.
# Gere uma com: from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())
# E coloque em .streamlit/secrets.toml
try:
    encryption_key = st.secrets["cookies"]["encryption_key"]
    if encryption_key == "PLEASE_REPLACE_WITH_A_REAL_GENERATED_FERNET_KEY" or len(encryption_key) < 32: # Verifica√ß√£o b√°sica
        st.error("A chave de criptografia de cookies em .streamlit/secrets.toml n√£o √© v√°lida ou √© um placeholder. "
                 "Por favor, gere uma chave Fernet real e atualize o arquivo.")
        st.stop()
except (KeyError, FileNotFoundError): # FileNotFoundError pode ocorrer se secrets.toml n√£o existir
    st.error("Chave de criptografia para cookies ('cookies.encryption_key') n√£o encontrada em .streamlit/secrets.toml. "
             "Crie o arquivo e adicione a chave.")
    st.stop()

cookies = EncryptedCookieManager(
    # A chave para EncryptedCookieManager √© a chave Fernet para criptografia.
    key=encryption_key,
    # O argumento 'prefix' √© usado para nomear os cookies internamente pela biblioteca,
    # n√£o √© o nome do cookie que voc√™ define com set().
    # Vamos usar o nome do cookie explicitamente em set/get/delete.
    # prefix="afltapp/authuser" # Exemplo de prefixo
)

def try_restore_session_for_login_page():
    if not cookies.ready():
        return
    # S√≥ tenta restaurar se n√£o j√° estiver logado no session_state
    if not st.session_state.get('logged_in', False): # Verifique se j√° n√£o est√° logado na sess√£o atual
        username_from_cookie = cookies.get('user_session_token')
        if username_from_cookie:
            st.session_state.logged_in = True
            st.session_state.username = username_from_cookie
            # N√£o precisa de st.rerun() aqui, pois isso acontece antes da renderiza√ß√£o da p√°gina.

def login_page():
    """Renderiza a p√°gina de login/registro."""
    # Tenta restaurar a sess√£o do cookie ANTES de qualquer outra l√≥gica de UI ou estado.
    # Mas depois da inicializa√ß√£o do st.session_state b√°sico.
    # A inicializa√ß√£o do st.session_state para logged_in, username, etc., j√° acontece abaixo.
    # try_restore_session_for_login_page() deve ser chamado ap√≥s essas inicializa√ß√µes
    # para que possa sobrescrev√™-las se um cookie v√°lido for encontrado.
    # Colocarei ap√≥s o bloco de inicializa√ß√£o do st.session_state.

    initialize_users_file()

    # st.set_page_config deve ser a primeira chamada Streamlit no script da p√°gina.
    # Se app.py j√° define um global, esta pode ser redundante ou causar conflito se diferente.
    # Para p√°ginas separadas, ter seu pr√≥prio page_title √© geralmente OK.
    # Removendo daqui para evitar conflitos, assumindo que app.py cuida da configura√ß√£o global da p√°gina.
    # st.set_page_config(page_title="Login", page_icon="üîí") 

    # Inicializar o estado da sess√£o se n√£o existir
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'username' not in st.session_state:
        st.session_state.username = None
    if 'login_error' not in st.session_state:
        st.session_state.login_error = None
    if 'register_error' not in st.session_state:
        st.session_state.register_error = None
    if 'register_success' not in st.session_state:
        st.session_state.register_success = None
    if 'previous_choice' not in st.session_state: 
        st.session_state.previous_choice = "Login"

    # Tenta restaurar a sess√£o do cookie aqui, ap√≥s as inicializa√ß√µes b√°sicas do session_state
    # mas antes de decidir qual UI mostrar (logado vs n√£o logado).
    try_restore_session_for_login_page()

    if not cookies.ready(): # Verificar se o gerenciador de cookies est√° pronto
        st.warning("Gerenciador de cookies n√£o est√° pronto. A persist√™ncia de login pode n√£o funcionar.")
        # Geralmente, ele funciona bem.

    if st.session_state.logged_in:
        st.sidebar.success(f"Logado como: {st.session_state.username}")
        st.title(f"Bem-vindo(a) de volta, {st.session_state.username}!")
        st.write("Voc√™ j√° est√° logado.")
        if st.button("Logout"):
            st.session_state.logged_in = False
            st.session_state.username = None
            st.session_state.login_error = None
            st.session_state.register_error = None
            st.session_state.register_success = None
            st.success("Logout realizado com sucesso!") # Mensagem tempor√°ria
            st.rerun() # For√ßa o rerun para atualizar a interface
        st.page_link("app.py", label="Ir para a Aplica√ß√£o Principal", icon="üè†")

    else:
        st.title("Login / Registro")

        choice = st.radio("Escolha uma a√ß√£o:", ("Login", "Registrar Novo Usu√°rio"), horizontal=True)
        st.markdown("---")

        if choice == "Login":
            st.subheader("Login")
            with st.form("login_form"):
                login_username = st.text_input("Nome de Usu√°rio", key="login_uname")
                login_password = st.text_input("Senha", type="password", key="login_pword")
                login_button = st.form_submit_button("Login")

                if login_button:
                    if verify_user(login_username, login_password):
                        st.session_state.logged_in = True
                        st.session_state.username = login_username
                        st.session_state.login_error = None
                        
                        # Definir cookie ao logar
                        # O nome do cookie aqui √© 'user_session_token'
                        # O valor √© o nome de usu√°rio (que ser√° criptografado)
                        # Expira em 7 dias
                        expires_at = datetime.datetime.now() + datetime.timedelta(days=7)
                        cookies.set('user_session_token', login_username, expires_at=expires_at)
                        # Nota: A biblioteca EncryptedCookieManager usa seu 'prefix' internamente
                        # para nomear o cookie real no navegador. O 'user_session_token' √© a chave
                        # que voc√™ usa com a biblioteca para get/set/delete.

                        st.rerun() 
                    else:
                        st.session_state.login_error = "Nome de usu√°rio ou senha inv√°lidos."
                
                if st.session_state.login_error:
                    st.error(st.session_state.login_error)


        elif choice == "Registrar Novo Usu√°rio":
            st.subheader("Registrar Novo Usu√°rio")
            with st.form("register_form"):
                reg_username = st.text_input("Escolha um Nome de Usu√°rio", key="reg_uname")
                reg_password = st.text_input("Escolha uma Senha", type="password", key="reg_pword")
                reg_password_confirm = st.text_input("Confirme a Senha", type="password", key="reg_pword_confirm")
                register_button = st.form_submit_button("Registrar")

                if register_button:
                    if not reg_username or not reg_password:
                        st.session_state.register_error = "Nome de usu√°rio e senha s√£o obrigat√≥rios."
                    elif reg_password != reg_password_confirm:
                        st.session_state.register_error = "As senhas n√£o coincidem."
                    else:
                        # A fun√ß√£o register_user em user_management j√° mostra st.error/st.success
                        # Ent√£o, aqui s√≥ precisamos limpar o estado de erro/sucesso local
                        st.session_state.register_error = None 
                        st.session_state.register_success = None
                        
                        # A fun√ß√£o register_user retorna True em sucesso, False em falha
                        # E j√° lida com st.error internamente para "usu√°rio j√° existe"
                        # ou "campos vazios" (embora j√° tenhamos verificado aqui)
                        if register_user(reg_username, reg_password):
                            st.session_state.register_success = f"Usu√°rio '{reg_username}' registrado com sucesso! Voc√™ j√° pode fazer login."
                            # Limpar campos do formul√°rio de registro (opcional, mas bom UX)
                            # Isso requer que os widgets sejam recriados, o que o rerun far√°.
                            # No entanto, para limpar explicitamente, ter√≠amos que manipular os keys,
                            # ou apenas deixar que o rerun limpe ap√≥s a mensagem de sucesso.
                            # Por simplicidade, a mensagem de sucesso √© suficiente.
                        else:
                            # register_user j√° mostrou um st.error,
                            # podemos apenas garantir que n√£o haja mensagem de sucesso aqui.
                            st.session_state.register_success = None
                            # A mensagem de erro espec√≠fica (ex: "Usu√°rio j√° existe")
                            # √© mostrada por register_user.
                            # N√£o precisamos definir st.session_state.register_error aqui
                            # a menos que queiramos sobrescrever a mensagem de register_user.
                
                if st.session_state.register_error:
                    st.error(st.session_state.register_error)
                if st.session_state.register_success:
                    st.success(st.session_state.register_success)
                    # Limpar a mensagem de sucesso ap√≥s exibi-la uma vez
                    st.session_state.register_success = None 


if __name__ == "__main__":
    login_page()

# Garantir que o estado de erro/sucesso seja limpo ao mudar de aba (Login/Registro)
# Isso pode ser feito observando a mudan√ßa no st.radio, mas √© complexo com o estado atual.
# Uma forma mais simples √© que as mensagens de erro/sucesso s√£o resetadas (para None)
# antes de tentar uma nova opera√ß√£o de login ou registro.
# As mensagens de `user_management.py` (st.error/st.success) s√£o inerentemente tempor√°rias.
# As mensagens de `st.session_state.login_error` e `st.session_state.register_error`
# s√£o explicitamente setadas e mostradas. Elas s√£o resetadas (para None)
# em um login/registro bem-sucedido ou antes de uma nova tentativa.
# A mensagem de sucesso de registro √© explicitamente limpa ap√≥s ser mostrada.

# O st.set_page_config deve ser a primeira chamada Streamlit, exceto st.echo, st.spinner ou st.help.
# Se j√° estiver definido em app.py, pode causar um erro se chamado novamente aqui com par√¢metros diferentes.
# Idealmente, a configura√ß√£o global fica em app.py e p√°ginas espec√≠ficas podem ter t√≠tulos via st.title.
# Para este caso, como √© uma p√°gina "separada" de login, ter seu pr√≥prio page_title √© aceit√°vel.
# Se houver conflito, remova st.set_page_config daqui e confie no app.py.
# No entanto, Streamlit permite st.set_page_config em cada p√°gina para definir o t√≠tulo da aba do navegador e √≠cone.
# O que n√£o √© permitido √© chamar st.set_page_config m√∫ltiplas vezes *dentro da mesma execu√ß√£o de script de p√°gina*.
# Como esta √© uma p√°gina separada (01_Login.py), est√° OK.

# Limpar mensagens de erro/sucesso se o usu√°rio alternar entre Login e Registro
# Isso √© um pouco mais avan√ßado e pode requerer callbacks no st.radio.
# Por enquanto, as mensagens persistem at√© a pr√≥xima submiss√£o de formul√°rio ou rerun.
# Uma forma simples de mitigar:
if 'previous_choice' not in st.session_state:
    st.session_state.previous_choice = "Login" # Default

if 'choice' in locals() and st.session_state.previous_choice != choice: # 'choice' √© o valor do st.radio
    st.session_state.login_error = None
    st.session_state.register_error = None
    st.session_state.register_success = None
    st.session_state.previous_choice = choice
    # N√£o fazer rerun aqui, pois isso pode acontecer durante a renderiza√ß√£o inicial.
    # A limpeza ocorrer√° e a p√°gina continuar√° a renderizar com os erros/sucessos limpos.
    # Isso garante que, ao mudar de aba, as mensagens antigas desapare√ßam.

# Nota: A verifica√ß√£o de 'choice' in locals() √© para evitar erro se st.radio n√£o for renderizado
# (por exemplo, se o usu√°rio j√° estiver logado).
# A l√≥gica de limpeza de st.session_state.previous_choice != choice
# deve ser colocada ap√≥s a defini√ß√£o do st.radio e antes que as mensagens de erro/sucesso sejam exibidas
# para que, se o usu√°rio alternar, as mensagens sejam limpas antes de serem potencialmente exibidas novamente.
# No entanto, a estrutura atual com st.form e st.rerun j√° lida com a maioria dos casos de atualiza√ß√£o de UI.
# A adi√ß√£o acima √© uma melhoria para limpar erros ao alternar abas sem submeter um formul√°rio.
# Para ser eficaz, ela deveria estar dentro da fun√ß√£o login_page, ap√≥s o st.radio.

# Corrigindo a localiza√ß√£o da l√≥gica de limpeza de erro ao alternar abas:
# Esta l√≥gica foi movida para dentro da fun√ß√£o login_page, ap√≥s o st.radio,
# mas isso n√£o √© trivial de fazer sem reestruturar significativamente como os formul√°rios e
# o estado s√£o tratados.
# Uma solu√ß√£o mais simples √© que os erros s√£o apenas substitu√≠dos ou limpos na pr√≥xima a√ß√£o.
# As mensagens de sucesso j√° s√£o limpas ap√≥s a exibi√ß√£o.
# As mensagens de erro (st.session_state.login_error, st.session_state.register_error)
# s√£o sobrescritas na pr√≥xima tentativa ou limpas em caso de sucesso.
# Para esta implementa√ß√£o, vamos manter a l√≥gica atual, que √© funcional.
# Refinamentos de UX como limpar erros ao trocar de abas sem submiss√£o podem ser adicionados depois se necess√°rio.
